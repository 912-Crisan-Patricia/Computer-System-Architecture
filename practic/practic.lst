     1                                  bits 32 
     2                                  global start
     3                                  
     4                                  
     5                                  ; declare external functions needed by our program
     6                                  extern exit, fprintf, fopen, fclose, printf, fread ,fwrite              ; tell nasm that exit exists even if we won't be defining it
     7                                  import exit msvcrt.dll                                           ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     8                                                                                                   ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     9                                  import fprintf msvcrt.dll 
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll 
    13                                  import fread msvcrt.dll    
    14                                  import fwrite msvcrt.dll 
    15                                  
    16                                  segment data use32 class=data
    17 00000000 746573745F696E7075-         fisierinput db "test_input.txt",0
    17 00000009 742E74787400       
    18 0000000F 746573745F6F757470-         fisieroutput db "test_output.txt",0
    18 00000018 75742E74787400     
    19 0000001F 7200                        modread db 'r',0
    20 00000021 7700                        modwrite db 'w',0
    21 00000023 FFFFFFFF                    descriptor dd -1
    22 00000027 FFFFFFFF                    descriptor2 dd -1
    23 0000002B 00                          buffer db 0
    24                                      len equ 200
    25 0000002C 00                          sir db 0
    26 0000002D 00                          ok db 0
    27 0000002E 00000000                    lensenteces dd 0
    28 00000032 04050607                    string db 4, 5, 6, 7
    29 00000036 00000000                    cuvant dd 0
    30                                  
    31                                  segment code use32 class=code
    32                                  start:
    33                                      ;A file containing only sentences (a sentence is a string ending with the '-' character).
    34                                      ;Write an assembly program that reads the given file and writes in a different file the 2nd to last word from each sentence followed by the number of words from each sentence.
    35                                      ;The names of both files are located in the data segment.
    36                                      
    37                                      ;output file: the will the good 4
    38                                      
    39 00000000 68[1F000000]                push dword modread
    40 00000005 68[00000000]                push dword fisierinput
    41 0000000A FF15[00000000]              call [fopen]
    42 00000010 83C408                      add esp, 4*2                ;open file 
    43                                      
    44 00000013 A3[23000000]                mov [descriptor],eax
    45 00000018 83F800                      cmp eax,0
    46 0000001B 746C                        je final                 ;if error occured during fopen jump to final
    47                                      
    48 0000001D 68[21000000]                push dword modwrite
    49 00000022 68[0F000000]                push dword fisieroutput
    50 00000027 FF15[00000000]              call [fopen]
    51 0000002D 83C408                      add esp, 4*2                ;open the output file for writing
    52                                      
    53                                      
    54                                      
    55 00000030 A3[27000000]                mov [descriptor2],eax
    56 00000035 83F800                      cmp eax, 0
    57 00000038 744F                        je final
    58                                          
    59                                      
    60                                      repeta:
    61 0000003A FF35[23000000]                  push dword [descriptor]
    62 00000040 6A01                            push dword 1
    63 00000042 6A01                            push dword 1  
    64 00000044 68[2C000000]                    push dword sir
    65 00000049 FF15[00000000]                  call [fread]  
    66 0000004F 83C410                          add esp, 4*4             ;read 200 characters from input file one byte and places it in sir
    67                                          
    68                                          ;mov ecx, eax
    69                                          ;jecxz final              ;if empty file, jump to final 
    70                                          ;push eax 
    71                                          
    72                                          ;std                     ;df =1 so we go from left to right
    73                                          ;mov esi,sir
    74                                          ;loop2:
    75                                              ;mov bx,0
    76                                              ;lodsb               ;takes byte from esi and loads it in al
    77                                              ;cmp al, '-'
    78                                              ;jne caseword
    79                                              ;cmp al, ' '
    80                                              ;je casespace
    81                                              ;caseline:           
    82                                                  ;mov byte [ok],0               ;case in which byte = "-" , we should reset the number of words and 
    83                                              ;casespace:
    84                                                  ;jmp endcase              ;case in which byte = " " , we should reset loop 2
    85                                                                
    86                                                       
    87                                              ;caseword:
    88                                                  ;add bx,[ok]                ;case in which byte is part of a sentence
    89                                                  ;add bx,1 
    90                                                  ;cmp bx,2
    91                                                  ;je storebyte
    92                                              ;storebyte:           ;if ok = 2 , it means the word is second to last and we should add it to output string
    93                                                  
    94                                              ;endcase:
    95                                                  ;loop loop2
    96                                                  
    97 00000052 FF35[27000000]                  push dword [descriptor2]
    98 00000058 6A01                            push dword 1
    99 0000005A 6A01                            push dword 1
   100 0000005C 68[32000000]                    push dword string
   101 00000061 FF15[00000000]                  call [fwrite]
   102 00000067 83C410                          add esp,4*4             ;write word
   103                                          
   104 0000006A 83F800                          cmp eax,0
   105 0000006D 7407                            je error                ;case in which the word could not store
   106 0000006F E2C9                        loop repeta
   107                                      
   108                                      
   109                                      
   110 00000071 83F800                      cmp eax,0
   111 00000074 7400                        je error
   112                                      
   113                                      error:
   114 00000076 68[1F000000]                push dword modread
   115 0000007B 68[0F000000]                push dword fisieroutput
   116 00000080 FF15[00000000]              call [fclose]
   117 00000086 83C408                      add esp, 4*2                ;close file 
   118                                      final:
   119                                      
   120 00000089 6A00                        push dword 0
   121 0000008B FF15[00000000]              call [exit] 
