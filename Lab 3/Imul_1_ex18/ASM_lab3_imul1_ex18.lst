     1                                  bits 32 
     2                                  global start
     3                                  
     4                                  
     5                                  extern exit 
     6                                  import exit msvcrt.dll  
     7                                  
     8                                  segment data use32 class=data
     9                                       
    10 00000000 11                          a db 11h
    11 00000001 22                          b db 22h
    12 00000002 2211                        c dw 1122h
    13 00000004 44332211                    e dd 11223344h
    14 00000008 8877665544332211            x dq 1122334455667788h
    15                                  
    16                                  segment code use32 class=code
    17                                  start:;(a+b*c+2/c)/(2+a)+e+x
    18                                  
    19                                      
    20 00000000 A0[01000000]                mov al,[b]      ;al = b
    21 00000005 6698                        cbw             ;al -> ax = b
    22 00000007 66F72D[02000000]            imul word [c]    ;dx:ax = b * c
    23                                      
    24 0000000E 6652                        push dx
    25 00000010 6650                        push ax         ;[ESP]1 = dx:ax = b * c
    26                                      
    27 00000012 66B80200                    mov ax, 2       
    28 00000016 6699                        cwd             ;dx:ax = 2
    29                                      
    30 00000018 66F73D[02000000]            idiv word [c]    ;ax = 2/c
    31 0000001F 6689C1                      mov cx, ax      ;cx = 2/c
    32                                      
    33 00000022 A0[00000000]                mov al, [a]
    34 00000027 6698                        cbw             ;al -> ax = a
    35 00000029 6689C3                      mov bx, ax      ;bx = a
    36                                      
    37 0000002C 6658                        pop ax
    38 0000002E 665A                        pop dx          ;dx:ax = b * c
    39                                      
    40 00000030 6601C8                      add ax, cx
    41 00000033 6683D200                    adc dx, 0       ;dx:ax = (b*c+2/c)
    42                                      
    43 00000037 6601D8                      add ax, bx
    44 0000003A 6683D200                    adc dx, 0       ;dx:ax = (a+b*c+2/c)
    45                                      
    46 0000003E 6652                        push dx
    47 00000040 6650                        push ax         ;[ESP]1 = dx:ax = (a+b*c+2/c)
    48                                      
    49 00000042 A0[00000000]                mov al, [a]     
    50 00000047 6698                        cbw             ;al -> ax = a
    51 00000049 6683C002                    add ax, 2       ;bx = a + 2
    52 0000004D 6689C3                      mov bx, ax
    53                                      
    54 00000050 6658                        pop ax
    55 00000052 665A                        pop dx
    56                                      
    57 00000054 66F7FB                      idiv bx          ;ax = (a+b*c+2/c)/(2+a)
    58                                      
    59 00000057 98                          cwde            ;ax -> eax = (a+b*c+2/c)/(2+a)
    60                                      
    61 00000058 8B0D[04000000]              mov ecx, [e]
    62                                      
    63 0000005E 01C8                        add eax, ecx    ;eax = (a+b*c+2/c)/(2+a)+e
    64                                      
    65 00000060 BA00000000                  mov edx, 0      ;eax -> edx:eax = (a+b*c+2/c)/(2+a)+e
    66                                      
    67 00000065 8B1D[08000000]              mov ebx, [x]
    68 0000006B 8B0D[0C000000]              mov ecx, [x+4]
    69                                      
    70 00000071 01D8                        add eax, ebx
    71 00000073 11CA                        adc edx, ecx    ;edx:eax = final result
    72                                      
    73                                          
    74 00000075 6A00                        push dword 0 
    75 00000077 FF15[00000000]              call [exit] 
    76                                  
    77                                  
